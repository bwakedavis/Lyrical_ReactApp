{"version":3,"sources":["components/layout/giphy.gif","components/layout/Navbar.js","Context.js","components/layout/Spinner.js","tracks/Track.js","tracks/Tracks.js","components/layout/Index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","Context","React","createContext","Provider","state","track_list","heading","axios","get","process","then","res","setState","data","message","body","console","log","catch","err","value","this","props","children","Component","Consumer","Spinner","src","spinner","alt","style","width","margin","display","Track","track","artist_name","track_name","album_name","to","track_id","Tracks","undefined","length","Fragment","map","item","key","Index","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,mC,gKCU5BC,MARf,WACI,OACI,yBAAKC,UAAW,mCACZ,0BAAMA,UAAU,gCAAhB,a,wDCDNC,EAAUC,IAAMC,gBACTC,EAAb,2MACEC,MAAQ,CACNC,WAAY,GACZC,QAAS,iBAHb,mFAKuB,IAAD,OAClBC,IACGC,IADH,qKAEkKC,qCAE/JC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACVP,WAAWM,EAAIE,KAAKC,QAAQC,KAAKV,aAErCW,QAAQC,IAAIN,EAAIE,SAEjBK,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,QAhBhC,+BAmBI,OACE,kBAACnB,EAAQG,SAAT,CAAkBiB,MAAOC,KAAKjB,OAC3BiB,KAAKC,MAAMC,cArBpB,GAA8BC,aA2BjBC,EAAWzB,EAAQyB,S,iBC9BjB,SAASC,IACpB,OACI,6BACI,yBAAKC,IAAKC,IAASC,IAAI,UAAUC,MAAO,CAACC,MAAM,QAASC,OAAO,YAAaC,QAAQ,YCgBjFC,MAnBf,SAAeZ,GAAQ,IACZa,EAASb,EAATa,MACP,OACI,yBAAKpC,UAAU,YACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,aACX,4BAAKoC,EAAMC,aACX,uBAAGrC,UAAU,aAC7B,2CAAiBoC,EAAME,YACvB,2CAAiBF,EAAMG,aAGP,kBAAC,IAAD,CAAMC,GAAE,sBAAiBJ,EAAMK,UAAYzC,UAAU,0BAArD,mBCoBL0C,E,iLA3BP,OACI,kBAAChB,EAAD,MACK,SAAAL,GAAQ,IACEf,EAAsBe,EAAtBf,WAAWC,EAAWc,EAAXd,QAElB,OADAU,QAAQC,IAAIG,QACKsB,IAAdrC,GAA+C,IAArBA,EAAWsC,OAC7B,kBAACjB,EAAD,MAGH,kBAAC,IAAMkB,SAAP,KACI,wBAAI7C,UAAU,oBAAoBO,GACtC,yBAAKP,UAAU,OACdM,EAAWwC,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,CAAOC,IAAMD,EAAKX,MAAMK,SAAUL,MAAQW,EAAKX,oB,GAf1DX,aCMNwB,MARf,WACI,OACI,kBAAC,IAAMJ,SAAP,KACI,kBAAC,EAAD,QCqBGK,MAlBf,WACE,OACE,kBAAC,EAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAML,SAAP,KACA,kBAAC,EAAD,MACA,yBAAK7C,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmD,OAAK,EAACC,KAAK,IAAIC,UAAWJ,UCLvBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACLnD,QAAQmD,MAAMA,EAAMrD,c","file":"static/js/main.aaba0130.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/giphy.f3d994ab.gif\";","import React from 'react'\n\nfunction Navbar() {\n    return (\n        <nav className= 'navbar navbar-dark bg-dark mg-5'>\n            <span className=\"navbar-brand mb-0 h1 mx-auto\">Lyrical</span>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","/** @format */\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nconst Context = React.createContext();\nexport class Provider extends Component {\n  state = {\n    track_list: [],\n    heading: \"Top 10 Tracks\"\n  };\n  componentDidMount() {\n    axios\n      .get(\n        `https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/chart.tracks.get?chart_name=top&page=1&page_size=10&country=US&f_has_lyrics=1&apikey=${process.env.REACT_APP_MM_KEY}`\n      )\n      .then(res => {\n        this.setState({\n            track_list:res.data.message.body.track_list\n        })\n        console.log(res.data);\n      })\n      .catch(err => console.log(err));\n  }\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React from 'react'\nimport spinner from './giphy.gif'\nexport default function Spinner() {\n    return (\n        <div>\n            <img src={spinner} alt=\"loading\" style={{width:'200px', margin:'40px auto', display:'block'}}/>\n        </div>\n    )\n}\n\n\n","import React from 'react'\nimport {Link} from 'react-router-dom';\nfunction Track(props) {\n    const {track} = props\n    return (\n        <div className=\"col-md-6\">\n            <div className=\"card mb-4 shadow-sm\">\n                <div className=\"card-body\">\n                    <h5>{track.artist_name}</h5>\n                    <p className=\"card-text\">\n    <strong>Track : {track.track_name}</strong>\n    <strong>Track : {track.album_name}</strong>\n                    </p>\n\n                    <Link to={`lyrcs/track/${track.track_id}`} className=\"btn btn-dark btn-block\">View lyrics</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Track\n","import React, { Component } from 'react'\nimport { Consumer } from '../Context'\nimport Spinner from '../components/layout/Spinner'\nimport Track from './Track'\n\nclass Tracks extends Component {\n    render() {\n        return (\n            <Consumer>\n                {value=>{\n                    const {track_list,heading} = value\n                    console.log(value)\n                    if(track_list ===undefined|| track_list.length ===0){\n                        return <Spinner/>\n                    }else{\n                        return (\n                            <React.Fragment>\n                                <h3 className=\"text-center mb-4\">{heading}</h3>\n                            <div className='row'>\n                            {track_list.map((item)=> (\n                                <Track key= {item.track.track_id} track ={item.track} />\n                            ))}\n                            </div>\n\n                            </React.Fragment>\n                        )\n                    }\n                }}\n               \n            </Consumer>\n        )\n    }\n}\n\nexport default Tracks\n\n","import React from 'react'\nimport Tracks from '../../tracks/Tracks'\n\nfunction Index() {\n    return (\n        <React.Fragment>\n            <Tracks/>\n        </React.Fragment>\n    )\n}\n\nexport default Index\n","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Navbar from './components/layout/Navbar';\nimport Index from './components/layout/Index';\nimport { Provider } from './Context';\n\n\nfunction App() {\n  return (\n    <Provider>\n    <Router>\n      <React.Fragment>\n      <Navbar/>\n      <div className=\"container\">\n        <Switch>\n          <Route exact path='/' component={Index}/>\n        </Switch>\n\n      </div>\n      </React.Fragment>\n    </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}